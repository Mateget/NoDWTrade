import java.nio.file.Paths
import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
    }
    dependencies {
         classpath 'com.guardsquare:proguard-gradle:7.1.0'
    }
}


plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
}


group = 'NoDWTrade-1.16.5'
version = '1.0.1'

java {
    archivesBaseName = 'NoDWTrade-1.16.5'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
  
    mappings channel: 'official', version: '1.16.5'

   
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            mods {
                nodwtrade {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'


            mods {
                nodwtrade {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'nodwtrade', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                nodwtrade {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    ivy {
        setUrl('https://download.nodecdn.net/containers/reforged/server/release')
        metadataSources {
            artifact()
        }
        patternLayout {
            artifact('[revision]/[artifact].[ext]')
        }
    }
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'
    
    
    
    implementation fg.deobf('pixelmon:Pixelmon-1.16.5-9.1.10-server:9.1.10')
	//implementation fileTree(dir: 'libs', include: ['*.jar'])
 	
    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

task proguard(type: proguard.gradle.ProGuardTask) {
    configuration 'proguard.pro'

    injars "build/libs/NoDWTrade-1.16.5-${version}.jar"
    outjars "build/libs/NoDWTrade-1.16.5-${version}-release.jar"
}

task obfuscate() {
    doLast {
        println "[ALFO] Obfuscating mod..."
    }
}

build.finalizedBy obfuscate
obfuscate.finalizedBy proguard


jar {

	 duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
            configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
        }
    manifest {
        attributes([
                "Specification-Title"     : "nodwtrade",
                //"Specification-Vendor": "nodwtrade authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "nodwtrade authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
